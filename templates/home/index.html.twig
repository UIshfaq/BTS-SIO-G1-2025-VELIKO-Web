{% extends 'base.html.twig' %}

{% block title %}Home{% endblock %}

{% block body %}


    <h1>Bienvenue sur votre carte Veliko.</h1>
    <br>

    <meta charset="utf-8">
    <!-- Nous chargeons les fichiers CDN de Leaflet. Le CSS AVANT le JS -->


    <link rel="stylesheet" href="{{ asset('css/styles.css') }}">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin="" />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.css" />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.Default.css" />
    <style type="text/css">
        #map {
            height: 600px;
        }
    </style>

    <title>Carte</title>

    <div id="map"></div>



    <!-- Fichiers Javascript -->
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
    <script type='text/javascript' src='https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js'></script>
    <script type="text/javascript">
        var lat = 48.852969;
        var lon = 2.349903;
        var macarte = null;
        var markerClusters; // Conteneur pour les marqueurs

        // Fonction d'initialisation de la carte
        function initMap() {
            var iconBase = 'http://localhost/carte/icons/';
            macarte = L.map('map').setView([lat, lon], 11);
            markerClusters = L.markerClusterGroup();




            // Définir l'icône personnalisée
            var userIcon = L.icon({
                iconUrl: '{{ asset('Images/user-logo.png') }}', // Chemin vers votre icône
                iconSize: [32, 32], // Taille de l'icône
                iconAnchor: [16, 32], // Point d'ancrage de l'icône
                popupAnchor: [0, -32] // Point d'ancrage de la popup
            });


            // Chargement de la carte via OpenStreetMap
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                attribution: 'données © <a href="//osm.org/copyright">OpenStreetMap</a>/ODbL - rendu <a href="//openstreetmap.fr">OSM France</a>',
                minZoom: 1,
                maxZoom: 20
            }).addTo(macarte);

            // Chargement des stations
            loadStations();




            // Centrer sur la géolocalisation de l'utilisateur si disponible
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var userLat = position.coords.latitude;
                    var userLon = position.coords.longitude;

                    // Ajuster ici le niveau de zoom à 14 pour être plus proche de l'utilisateur
                    macarte.setView([userLat, userLon], 14);

                    // Ajouter un marqueur pour la position de l'utilisateur
                    // Ajouter un marqueur pour la position de l'utilisateur
                    L.marker([userLat, userLon], { icon: userIcon }).addTo(macarte).bindPopup("Vous êtes ici !").openPopup();
                }, function (error) {
                    console.error("Erreur lors de la récupération de la position :", error);
                });
            }

        }

        // Fonction pour charger et afficher les stations sur la carte
        function loadStations() {
            {% for station1 in response %}
            {% set matching_station = response2 | filter(station => station.station_id == station1.station_id) | first %}
            {% if matching_station is not null %}
            var marker = L.marker([{{ station1.lat }}, {{ station1.lon }}]).bindPopup(
                'Station: {{ station1.name }}<br>' +
                'Nombre de vélos restant : {{ matching_station.num_bikes_available is defined ? matching_station.num_bikes_available : "N/A" }}<br>' +
                'Nombre de vélos mécaniques : {{ matching_station.num_bikes_available_types[0].mechanical is defined ? matching_station.num_bikes_available_types[0].mechanical : "N/A" }}<br>' +
                'Nombre de vélos électriques : {{ matching_station.num_bikes_available_types[1].ebike is defined ? matching_station.num_bikes_available_types[1].ebike : "N/A" }}' +
                '{% if app.user %}' +
                '<form action="{{ path('app_add_favorite', {'id': station1.station_id}) }}" method="post">' +
                '<button type="submit">Mettre en favori</button>' +
                '</form>' +
                '{% endif %}'
            );

            // Methode qui permet le survol des marker et qui affiche les infos
            marker.bindTooltip(
                '<b>Station: {{ station1.name }}</b><br>' +
                'Vélos disponibles : {{ matching_station.num_bikes_available is defined ? matching_station.num_bikes_available : "N/A" }}<br>' +
                'Vélos mécaniques : {{ matching_station.num_bikes_available_types[0].mechanical is defined ? matching_station.num_bikes_available_types[0].mechanical : "N/A" }}<br>' +
                'Vélos électriques : {{ matching_station.num_bikes_available_types[1].ebike is defined ? matching_station.num_bikes_available_types[1].ebike : "N/A" }}'
            );

            markerClusters.addLayer(marker); // Ajouter le marqueur au groupe de clusters
            {% endif %}
            {% endfor %}

            macarte.addLayer(markerClusters); // Ajouter les clusters à la carte
        }

        // Exécuter la fonction d'initialisation au chargement de la page
        window.onload = function () {
            initMap();
        };
    </script>
{% endblock %}
